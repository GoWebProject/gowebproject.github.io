@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Components.Web;
@page "/Profile"
@using Microsoft.JSInterop;
@using WebApplication.Models;
@inject IJSRuntime JsRuntime;
@inject NavigationManager _navigationManager

<div class="profile-inner">
    <form>
        <div readonly>
            <label for="name">Имя пользователя:</label><br>
            <input style="width: auto; @(madeAttempt && username.Length == 0 ? "border-color:red;" : "");" class="form-control input_user" @bind="username" type="text" id="username"><br><br>
            <label for="secondname">Полное Имя:</label><br>
            <input style="width: auto;@(madeAttempt && fullname.Length == 0 ? "border-color:red;" : "");" class="form-control input_user" @bind="fullname" type="text" id="fullname" @attributes="@(disable_fields ? readOnlyAttr : notReadOnlyAttr)"><br><br>
            <label for="login">Почта:</label><br>
            <input style="width: auto; @(madeAttempt && email.Length == 0 && email.Contains('@') ? "border-color:red;" : "");" class="form-control input_user" @bind="email" type="text" id="email" @attributes="@(disable_fields ? readOnlyAttr : notReadOnlyAttr)"><br><br>
            <label for="rating">РФГ рейтинг:</label><br>
            <input style="width: auto;@(madeAttempt && !checkRating() ? "border-color:red;" : "")" class="form-control input_user" @bind="rating" type="text" id="rating" @attributes="@(disable_fields ? readOnlyAttr : notReadOnlyAttr)"><br><br>
            <label for="misc_racing">Другие рейтинги:</label><br>
            <input style="width: auto; " class="form-control input_user" @bind="misc_rating" type="text" id="misc_rating" @attributes="@(disable_fields ? readOnlyAttr : notReadOnlyAttr)"><br><br>
        </div>
    </form>
    <div class="mt-4">
        <a href="/Account/PasswordChange" class="ml-2">Сменить пароль</a>
    </div>
    <button class="btn btn-primary" @onclick="OnSubmitButtonClick">@buttonLabel</button>
    <button class="btn btn-primary" @onclick="document.location='Account/Logout'">Выйти</button>
</div>

@code{
    private bool disable_fields = true;
    private bool madeAttempt;
    private string username = "";
    private string old_username = "";
    private string fullname = "";
    private string email = "";
    private string buttonLabel = "Изменить данные";
    private string rating = "";
    private string misc_rating = "";
    private List<KeyValuePair<string, object>> readOnlyAttr = new() {new KeyValuePair<string, object>("readonly", "")};
    private List<KeyValuePair<string, object>> notReadOnlyAttr = new();

    [Parameter]
    public string LoggedUsername { get; set; }

    protected override Task OnInitializedAsync()
    {
        var user = UserManager.GetUser(LoggedUsername);
        username = user.Username;
        old_username = username;
        fullname = user.FullName;
        email = user.Email;
        rating = user.RfgRating;
        misc_rating = user.MiscRating;
        return base.OnInitializedAsync();
    }

    void OnSubmitButtonClick()
    {
        if (disable_fields)
        {
            disable_fields = false;
            buttonLabel = "Сохранить изменения";
        }

        else
        {
            var change_user = false;
            if ((username.Length > 0) && (fullname.Length > 0) && (email.Length > 0) && (email.Contains('@')) && checkRating())
            {
                change_user = UserManager.ChangeUser(old_username, new User(username, email, "", fullname, rfgRating: rating, miscRating: misc_rating));
                if (!change_user)
                {
                    JsRuntime.InvokeVoidAsync("alert", "Пользователь с таким именем есть");
                    username = "";
                }
            }
            else
            {
                if (!email.Contains('@') && (email.Length > 0))
                {
                    JsRuntime.InvokeVoidAsync("alert", "Email должен сожержать знак @");
                }
                else
                {
                    JsRuntime.InvokeVoidAsync("alert", "Заполните соответствующие поля!");
                }

                madeAttempt = true;
            }
            if (change_user)
            {
                disable_fields = true;
                buttonLabel = "Изменить данные";
                JsRuntime.InvokeVoidAsync("alert", "Данные изменены!");
            }
        }
    }

    private bool checkRating()
    {
        foreach (var c in rating)
        {
            if (char.IsDigit(c))
            {
                return false;
            }
        }
        return true;
    }


}