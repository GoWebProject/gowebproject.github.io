@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.JSInterop;
@using WebApplication.Models;
@inject IJSRuntime JsRuntime;
@inject NavigationManager _navigationManager;

<div class="white">
    <form>
        <label for="password">Старый Пароль:</label><br>
        <input style="width: auto; @(madeAttempt && old_pwd.Length == 0 ? "border-color:red;" : "");" class="form-control input_user" @bind="old_pwd" type="password" id="password"><br><br>
        <label for="password">Новый Пароль:</label><br>
        <input style="width: auto; @(madeAttempt && new_pwd.Length == 0 ? "border-color:red;" : "");" class="form-control input_user" @bind="new_pwd" type="password" id="password"><br><br>
        <label for="password">Повторите Пароль:</label><br>
        <input style="width: auto; @(madeAttempt && new_pwd1.Length == 0 ? "border-color:red;" : "");" class="form-control input_user" @bind="new_pwd1" type="password" id="password"><br><br>
    </form>
    <button class="btn btn-primary" @onclick="OnSubmitButtonClick">Подтвердить изменения</button>
</div>

@code{
    private bool madeAttempt = false;
    private string old_pwd = "";
    private string new_pwd = "";
    private string new_pwd1 = "";
    [Parameter]
    public string LoggedUsername { get; set; }
@*    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        var user = UserManager.GetUser(LoggedUsername);
        username = user.Username;
        return base.OnAfterRenderAsync(firstRender);
    }*@
    void OnSubmitButtonClick()
    {
        if ((old_pwd.Length > 0) && (new_pwd.Length > 0) && (new_pwd1.Length > 0))
        {
            var get_user = UserManager.GetUser(LoggedUsername, old_pwd);
            if ((get_user == null) )
            {
                JsRuntime.InvokeVoidAsync("alert", "Пароль неверный");
                old_pwd = "";
                madeAttempt = true;
            }
            else if (new_pwd != new_pwd1)
            {
                JsRuntime.InvokeVoidAsync("alert", "Пароли несовпадают");
                new_pwd = "";
                new_pwd1 = "";
                madeAttempt = true;
            }
            else
            {
                UserManager.ChangeUserPassword(LoggedUsername, new_pwd);
                JsRuntime.InvokeVoidAsync("alert", "Пароль изменен");
                @*CookieManager.WriteCookies(JsRuntime, "username", new_pwd);*@
            old_pwd = "";
            new_pwd = "";
            new_pwd1 = "";
        }
    }
    else {
        JsRuntime.InvokeVoidAsync("alert", "Заполните соответствующие поля!");
        madeAttempt = true;

    }
}
}
