@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.JSInterop;
@using WebApplication.Models;
@inject IJSRuntime JsRuntime;
@inject NavigationManager _navigationManager;
<table class="table table-striped">
    <thead>
    <tr>
        <th scope="col">№</th>
        <th scope="col">Имя</th>
        <th scope="col">Рейтинг</th>
        @{
            if (isAdmin)
            {
                <th scope="col">Действия</th>
            }
        }
    </tr>
    </thead>
    <tbody>
    <tr>
        @{
            for (var i = 0; i < users.Count; i++)
            {
                var user = users[i];
                <th scope="row">@(i + 1)</th>
                username = user.FullName;
                RfgRating = user.RfgRating;
                <td>
                    <input style="width: auto; @(madeAttempt && username.Length == 0 ? "border-color:red;" : "");" class="form-control input_user" @bind="username" type="text" id="username" @attributes="@(inChange ? readOnlyAttr : notReadOnlyAttr)"><br><br>
                </td>
                <td>
                    <input style="width: auto; @(madeAttempt && RfgRating.Length == 0 ? "border-color:red;" : "");" class="form-control input_user" @bind="RfgRating" type="text" id="RfgRating" @attributes="@(inChange ? readOnlyAttr : notReadOnlyAttr)"><br><br>
                </td>
                if (isAdmin)
                {
                    <td>
                        <button type="button" class="btn btn-success" data-toggle="tooltip" data-placement="top" title="Изменить данные пользователя" @onclick="@(e => OnSubmitButtonClick_change(i))">
                            @if (inChange)
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                    <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
                                    <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z"/>
                                </svg>
                            }
                            else
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-save" viewBox="0 0 16 16">
                                    <path d="M2 1a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H9.5a1 1 0 0 0-1 1v7.293l2.646-2.647a.5.5 0 0 1 .708.708l-3.5 3.5a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L7.5 9.293V2a2 2 0 0 1 2-2H14a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h2.5a.5.5 0 0 1 0 1H2z"/>
                                </svg>
                            }
                        </button>
                        <button type="button" class="btn btn-danger" data-toggle="tooltip" data-placement="top" title="Удалить пользователя" @onclick="@(e => OnSubmitButtonClick_dell(i))">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash" viewBox="0 0 16 16">
                                <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                                <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                            </svg>
                        </button>
                    </td>
                }
            }
        }
    </tr>
    </tbody>
</table>

@code{

    [Parameter]
    public string LoggedUsername { get; set; }

    public List<User> users;
    bool isAdmin;
    private bool madeAttempt;
    private bool inChange = false;
    private string username = "";
    private string RfgRating = "";
    private List<KeyValuePair<string, object>> readOnlyAttr = new() {new KeyValuePair<string, object>("readonly", "")};
    private List<KeyValuePair<string, object>> notReadOnlyAttr = new();

    protected override Task OnInitializedAsync()
    {
        var curUser = LoggedUsername != null ? UserManager.GetUser(LoggedUsername) : null;
        isAdmin = curUser is { AccessLevel: 1 };
        users = UserManager.GetUsers("rating desc");
        return base.OnInitializedAsync();
    }

    void OnSubmitButtonClick_change(int i)
    {
        if (!inChange)
        {
            inChange = true;
        }
        else
        {
            madeAttempt = true;
            if (RfgRating.Length != 0 && username.Length != 0)
            {
                UserManager.ChangeUser(users[i].Username, new User(users[i].Username, users[i].Email, "", username, rfgRating: RfgRating));
                inChange = false;
                madeAttempt = false;
            }
        }
    }

    void OnSubmitButtonClick_dell(int i)
    {
        UserManager.DeleteUser(users[i].Username);
    }

}